// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows" , "debian-openssl-3.0.x"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}


enum StudentType {
  KINDERGARTEN
  PRIMARY
  SECONDARY
  HIGH_SCHOOL
}

model Student {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  password      String
  uniqueId      String?        @unique
  teacherId     String?           
  teacher       Teacher?       @relation(fields: [teacherId], references: [uniqueId])  
  levelProgress LevelProgress[]
  studentDetail StudentDetail?
}

model Teacher {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String?
  password      String
  imageUrl      String?
  uniqueId      String?    @unique
  students      Student[]  
}


model Level {
  id          Int    @id @default(autoincrement())
  levelNumber Int    @unique  // Unique to ensure each level is unique
  subLevels   SubLevel[]
  LevelProgress LevelProgress[]
}

model SubLevel {
  id                Int    @id @default(autoincrement())
  name              String?
  content           String?  // Store sub-level content or other necessary fields
  levelId           Int
  order             Int?     // Order of sub-levels within the level
  SubLevelProgress  SubLevelProgress[]
  level             Level    @relation(fields: [levelId], references: [id])

  // DefaultLevel DefaultLevel[]
}

model LevelProgress {
  id             Int      @id @default(autoincrement())
  studentId      Int
  levelId        Int
  student        Student  @relation(fields: [studentId], references: [id])
  level          Level    @relation(fields: [levelId], references: [id])
  completed      Boolean  @default(false)
  score          Float    @default(0.0)  
  subLevelProgress SubLevelProgress[]
  @@unique([studentId, levelId]) // Ensure uniqueness of the combination
}

model SubLevelProgress {
  id                     Int            @id @default(autoincrement())
  levelProgressId        Int
  subLevelId             Int           
  completed              Boolean        @default(false)
  scoreAzure             Float          @default(0.0)  // Track score for each sub-level
  accuracyAzure          Float?
  completenessAzure      Float?
  pronunciationAzure     Float? 
  fluencyAzure           Float?    
  attemptsAzure          Int            @default(0)    // Track the number of attempts taken
  passCountAzure         Int            @default(0)    // Track the number of times the sub-level was passed
  failCountAzure         Int            @default(0)    // Track the number of times the sub-level was failed
  levelProgress          LevelProgress  @relation(fields: [levelProgressId], references: [id])
  subLevel               SubLevel       @relation(fields: [subLevelId], references: [id])
  langaugeModelID        String
  langaugeModel          LanguageModel @relation(fields: [langaugeModelID ] , references: [modelNo])

}



model StudentDetail {
  id            Int        @id @default(autoincrement())
  studentId     Int        @unique  // Ensure only one detail per student
  student       Student    @relation(fields: [studentId], references: [id])
  age           Int?
  favoriteColor String?
  grade         String?
  skillLevel    String?
  ethnicity     String?
  background    String?
  type         StudentType?
  imageUrl      String?
}

model LanguageModel {
  id           String   @id @default(cuid())
  modelName    String   
  modelNo      String   @unique @default("Azure-001")
  description  String?    
  version      String?
  createdAt    DateTime @default(now())
  subLevelProgress SubLevelProgress[]

}
